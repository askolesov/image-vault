package command

import (
	"fmt"

	"github.com/askolesov/image-vault/pkg/differ"
	"github.com/spf13/cobra"
)

// GetDiffCmd returns the diff command
func GetDiffCmd() *cobra.Command {
	var outputFile string
	var skipCreatedTime bool
	var skipModifiedTime bool

	cmd := &cobra.Command{
		Use:   "diff <source_scan.json> <target_scan.json>",
		Short: "Compare two scan results and generate a difference report",
		Long: `Diff compares two scan result files (generated by the 'scan' command) and
creates a report showing files that exist in one location but not the other.

The report includes:
- Files present only in the source scan
- Files present only in the target scan
- Files with different metadata (size, timestamps, etc.)
- Summary statistics

By default, files are considered modified if they differ in size, created time, 
modified time, or directory status. You can skip time comparisons using the 
--skip-created and --skip-modified flags.

Examples:
  imv diff scan1.json scan2.json --output diff_report.json
  imv diff old_backup.json current_state.json -o changes.json
  imv diff scan1.json scan2.json --skip-created --skip-modified`,
		Args: cobra.ExactArgs(2),
		RunE: func(cmd *cobra.Command, args []string) error {
			sourceFile := args[0]
			targetFile := args[1]

			// Create differ
			d := differ.NewDiffer()

			fmt.Printf("Comparing scan files:\n")
			fmt.Printf("  Source: %s\n", sourceFile)
			fmt.Printf("  Target: %s\n", targetFile)

			// Create comparison options
			options := differ.CompareOptions{
				SkipCreatedTime:  skipCreatedTime,
				SkipModifiedTime: skipModifiedTime,
			}

			// Show comparison options if any are enabled
			if skipCreatedTime || skipModifiedTime {
				fmt.Printf("  Options:\n")
				if skipCreatedTime {
					fmt.Printf("    - Skipping created time comparison\n")
				}
				if skipModifiedTime {
					fmt.Printf("    - Skipping modified time comparison\n")
				}
			}

			// Perform comparison
			report, err := d.CompareScanFiles(sourceFile, targetFile, options)
			if err != nil {
				return fmt.Errorf("failed to compare scan files: %w", err)
			}

			// Display summary
			fmt.Printf("\nComparison Summary:\n")
			fmt.Printf("  Files only in source: %d\n", report.Summary.FilesOnlyInSource)
			fmt.Printf("  Files only in target: %d\n", report.Summary.FilesOnlyInTarget)
			fmt.Printf("  Common files: %d\n", report.Summary.CommonFiles)

			// Save report to file
			if err := report.SaveToFile(outputFile); err != nil {
				return fmt.Errorf("failed to save diff report: %w", err)
			}

			fmt.Printf("\nDiff report saved to: %s\n", outputFile)
			return nil
		},
	}

	cmd.Flags().StringVarP(&outputFile, "output", "o", "diff_report.json", "Output file for diff report")
	cmd.Flags().BoolVar(&skipCreatedTime, "skip-created", true, "Skip comparison of file created times")
	cmd.Flags().BoolVar(&skipModifiedTime, "skip-modified", true, "Skip comparison of file modified times")

	return cmd
}
